import argparse
import os
import sys

def runParser():
  parser = argparse.ArgumentParser()

  parser.add_argument('-i', '--input', required=True, metavar='file_or_dir_path',
    help='''Path to fasta file(s) to clean.
    You can provide the path to a single fasta file or a directory containing multiple fasta files.
    Squeakuences will not search subdirectories.
    This can be the full path or relative to the squeakuences.py file location.''')
  
  parser.add_argument('-o', '--output', required=True, metavar='dir_path',
    help='''Path to output folder where files generated by Squeakuences will be written.
    This can be the full path or relative to the squeakuences.py file location.
    If this directory path does not exist at runtime, Squeakuences will create it for you.''')
  
  parser.add_argument('-c', '--chopMethod', action='store', default = None, choices=['words', 'chars', 'skip'], required=False,
    help='When activated, Squeakuences will use the specified shortening method.')

  parser.add_argument('-e', '--fileExt', nargs='*', default = None, required=False, metavar='.ext',
    help='''When activated, Squeakuences will collect files with the provided extension(s). 
    To collect files with multiple extensions, simply list them behind each other such as ".fa .fna". 
    Include the dot in your argument, such as ".fna"''') 

  parser.add_argument('-f', '--addFileName', action='store_true', default = None, required=False,
    help='When activated, Squeakuences will add the file name to the beginning of all sequences cleaned.') 
  
  parser.add_argument('-l', '--log', action='store_true', default = None, required=False,
    help='When activated, Squeakuences will generate a log file with processing info from each fasta file cleaned.')
  
  parser.add_argument('-m', '--chopMax', action='store', default = None, type = int, required=False, metavar='integer',
    help='When activated, Squeakuences will set the maximum character length of cleaned sequence ids to this integer.')
  
  parser.add_argument('-p', '--preview', action='store_true', default = False, required=False,
    help='When activated, Squeakuences will generate a preview of 15 cleaned sequences from the top of each input file.')
  
  parser.add_argument('-u', '--underscore', action='store_true', default = None, required=False,
    help='When activated, Squeakuences will replace whitespace (spaces and tabs) and non-alphanumeric characters with an underscore.')
  
  parser.add_argument('-x', '--ignore', action='store', default = None, required=False, metavar='characters',
    help='''When activated, Squeakuences will ignore the provided specifed characters during cleaning and leave them in any cleaned sequence ids. 
    Please provide the characters you would like to leave in sequence ids in single or double quotes such as "-,()". 
    If included, the underscore character must be at the front of your input string.''')
  
  parser.add_argument('-r', '--retain', action='store', default = None, required=False, metavar='tag',
    help='''When activated, Squeakuences will retain tag information in the sequence id such as "locus=abc123". 
    The information in this tag will not be cleaned and appended to the end of the cleaned sequence id. Pass in the tag name in the format of -r 'locus='.''')
  
  return parser.parse_args()

def setDefaults(argsDict):
  if argsDict['chopMethod'] is None:
    argsDict.update({'chopMethod': 'words'})

  if argsDict['fileExt'] is None:
    argsDict.update({'fileExt': ['.fa*']})

  if argsDict['addFileName'] is None:
    argsDict.update({'addFileName': False})

  if argsDict['log'] is None:
    argsDict.update({'log': False})

  if argsDict['chopMax'] is None:
    argsDict.update({'chopMax': 70})

  if argsDict['preview'] is None:
    argsDict.update({'preview': False})

  if argsDict['underscore'] is None:
    argsDict.update({'underscore': False})

  if argsDict['ignore'] is None:
    argsDict.update({'ignore': None})

  if argsDict['retain'] is None:
    argsDict.update({'retain': None})

def messagesForArgs(argsDict):
  if argsDict['chopMethod'] == argsDict['fileExt'] == argsDict['addFileName'] == argsDict['log'] == argsDict['chopMax'] == argsDict['underscore'] == argsDict['ignore'] == argsDict['retain'] == None  and argsDict['preview'] == False:
    print('No flags detected in command.')
  else:
    if argsDict['chopMethod'] == 'words' or argsDict['chopMethod'] == 'chars':
      print('You\'ve activated the -c flag.\nSqueakuences will shorten sequence ids with the '+ argsDict['chopMethod']+ ' method.')
    if argsDict['chopMethod'] == 'skip':
      print('You\'ve activated the -c flag in skip mode.\nSqueakuences will not shorten sequence ids.')
    if argsDict['fileExt'] != None:
      print('You\'ve activated the -e flag.\nFiles with the ' + str(argsDict['fileExt']) + ' extension(s) will be collected for cleaning.')
    if argsDict['addFileName'] != None:
      print('You\'ve activated the -f flag.\nThe file name will be inserted at the beginning of all sequences cleaned.')
    if argsDict['log'] != None:
      print('You\'ve activated the -l flag.\nA log file with information about each fasta file processed will be written in the output directory.')
    if argsDict['chopMax'] != None:
      print('You\'ve activated the -m flag.\nThe maximum character length of cleaned sequence ids is set to ' + str(argsDict['chopMax']) + '.')
    if argsDict['preview'] != False:
      print('You\'ve activated the -p flag.\nSqueakuences will generate a preview of cleaned sequence ids from the input file.')
    if argsDict['underscore'] != None:
      print('You\'ve activated the -u flag.\nSqueakuences will replace whitespace (spaces and tabs) and nonalphanumeric characters with an underscore.')
    if argsDict['ignore'] != None:
      print('You\'ve activated the -x flag.\nSqueakuences will ignore ' + argsDict['ignore'] + ' characters during cleaning.')
    if argsDict['retain'] != None:
      print('You\'ve activated the -r flag.\nSqueakuences will retain the information in the ' + argsDict['retain'] + ' tag and append to the end after cleaning.')

def printArgumentState(argsDict):
  print('Squeakuences will clean sequence ids will the following settings:\n')
  print('Chop method (-c): ' + argsDict['chopMethod'])
  print('Maximum sequence id character length (-m): ' + str(argsDict['chopMax']))
  print('Prepend file name (-f): ' + str(argsDict['addFileName']))
  print('Underscores (-u): ' + str(argsDict['underscore']))
  print('Ignore characters (-x): ' + str(argsDict['ignore']))
  print('Retain tag (-r): ' + str(argsDict['retain']))
  print('--------------------------------')

def resolveInputType(userInput):
  if os.path.isfile(userInput):
    fileType = 'file'
  elif os.path.isdir(userInput):
    fileType = 'directory'
  else:
    invalidInput()

  print('You\'ve input a ' + fileType + '.')
  return fileType

def invalidInput():
    print('You\'ve passed a non-path string into the input flag. Please review your input and try again.')
    print('Exiting Squeakuences run now.')
    sys.exit()
